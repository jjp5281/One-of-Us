#!/bin/bash

# VirusTotal File Analysis Script
# Requires: curl, jq (for JSON parsing)

# Configuration
VT_API_KEY=a6a709f53dcc87f7c0c323d9bdf8b789edfa6ba0d7e3a301bfbf1a4d41cc3ed6  # Replace with your actual API key
API_URL="https://www.virustotal.com/gui/user/Jjp5281/apikey"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    echo "Usage: $0 C:\Users\bruce\Desktop\suspicious-files\*.exe [options]"
    echo "Options:"
    echo "  -q, --quiet    Quiet mode (less output)"
    echo "  -v, --verbose  Verbose mode (more details)"
    echo "  -h, --help     Display this help message"
    exit 1
}

# Function to check dependencies
check_dependencies() {
    if ! command -v curl &> /dev/null; then
        echo -e "${RED}Error: curl is not installed${NC}"
        exit 1
    fi
   
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}Error: jq is not installed${NC}"
        echo "Install with: sudo apt install jq"
        exit 1
    fi
}

# Function to upload file to VirusTotal
upload_file() {
    local file_path="$1"
   
    echo -e "${BLUE}[*] Uploading file to VirusTotal...${NC}"
   
    # Upload file
    response=$(curl -s --request POST \
        --url "${https://www.virustotal.com/gui/user/Jjp5281/apikey}/files" \
        --header "x-apikey: ${VT_API_KEY}" \
        --form "file=@${C:\Users\bruce\Desktop\suspicious-files\*.exe}")
   
    # Extract analysis ID
    analysis_id=$(echo "$response" | jq -r '.data.id')
   
    if [ "$analysis_id" == "null" ] || [ -z "$analysis_id" ]; then
        echo -e "${RED}[-] Failed to upload file${NC}"
        echo "Response: $response"
        exit 1
    fi
   
    echo -e "${GREEN}[+] File uploaded successfully${NC}"
    echo -e "${GREEN}[+] Analysis ID: ${analysis_id}${NC}"
   
    echo "$analysis_id"
}

# Function to check analysis status
check_analysis_status() {
    local analysis_id="$1"
   
    echo -e "${BLUE}[*] Checking analysis status...${NC}"
   
    response=$(curl -s --request GET \
        --url "${https://www.virustotal.com/gui/user/Jjp5281/apikey}/analyses/${analysis_id}" \
        --header "x-apikey: ${VT_API_KEY}")
   
    status=$(echo "$response" | jq -r '.data.attributes.status')
    echo "$status"
}

# Function to wait for analysis completion
wait_for_analysis() {
    local analysis_id="$1"
    local max_attempts=30
    local attempt=1
   
    while [ $attempt -le $max_attempts ]; do
        status=$(check_analysis_status "$analysis_id")
       
        case "$status" in
            "completed")
                echo -e "${GREEN}[+] Analysis completed${NC}"
                return 0
                ;;
            "queued"|"running")
                echo -e "${YELLOW}[!] Analysis ${status}... (attempt ${attempt}/${max_attempts})${NC}"
                sleep 10
                ;;
            *)
                echo -e "${RED}[-] Unknown status: ${status}${NC}"
                return 1
                ;;
        esac
       
        attempt=$((attempt + 1))
    done
   
    echo -e "${RED}[-] Analysis timeout${NC}"
    return 1
}

# Function to get file report
get_file_report() {
    local file_hash="$1"
   
    echo -e "${BLUE}[*] Retrieving file report...${NC}"
   
    response=$(curl -s --request GET \
        --url "${API_URL}/files/${file_hash}" \
        --header "x-apikey: ${VT_API_KEY}")
   
    echo "$response"
}

# Function to analyze results
analyze_results() {
    local response="$1"
    local verbose="$2"
   
    # Extract basic information
    file_hash=$(echo "$response" | jq -r '.data.id')
    size=$(echo "$response" | jq -r '.data.attributes.size')
    mime_type=$(echo "$response" | jq -r '.data.attributes.mime_type')
    first_submission=$(echo "$response" | jq -r '.data.attributes.first_submission_date')
   
    # Calculate threat score
    malicious_count=$(echo "$response" | jq '[.data.attributes.last_analysis_results[] | select(.category == "malicious")] | length')
    total_engines=$(echo "$response" | jq '.data.attributes.last_analysis_results | length')
   
    echo -e "\n${BLUE}===== ANALYSIS RESULTS =====${NC}"
    echo -e "File Hash: ${file_hash}"
    echo -e "File Size: ${size} bytes"
    echo -e "MIME Type: ${mime_type}"
   
    if [ "$malicious_count" -gt 0 ]; then
        echo -e "${RED}THREAT LEVEL: ${malicious_count}/${total_engines} engines detected as malicious${NC}"
        echo -e "${RED}VERDICT: MALICIOUS${NC}"
    else
        echo -e "${GREEN}THREAT LEVEL: 0/${total_engines} engines detected as malicious${NC}"
        echo -e "${GREEN}VERDICT: CLEAN${NC}"
    fi
   
    # Verbose output
    if [ "$verbose" = "true" ]; then
        echo -e "\n${BLUE}===== DETAILED RESULTS =====${NC}"
        echo "$response" | jq '.data.attributes.last_analysis_results[] | select(.category == "malicious") | .engine_name + ": " + .result'
    fi
   
    # Summary
    echo -e "\n${BLUE}===== SUMMARY =====${NC}"
    echo "Malicious detections: ${malicious_count}/${total_engines}"
   
    if [ "$malicious_count" -gt 0 ]; then
        echo -e "${RED}⚠️  FILE IS MALICIOUS${NC}"
        if [ "$verbose" = "true" ]; then
            echo -e "\n${YELLOW}Malicious engines:${NC}"
            echo "$response" | jq -r '.data.attributes.last_analysis_results[] | select(.category == "malicious") | .engine_name'
        fi
    else
        echo -e "${GREEN}✅ FILE APPEARS CLEAN${NC}"
    fi
}

# Main function
main() {
    local file_path=""
    local quiet=false
    local verbose=false
   
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                ;;
            -q|--quiet)
                quiet=true
                shift
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -*)
                echo "Unknown option $1"
                usage
                ;;
            *)
                if [ -z "$file_path" ]; then
                    file_path="$1"
                else
                    echo "Too many arguments"
                    usage
                fi
                shift
                ;;
        esac
    done
   
    # Validate input
    if [ -z C:\Users\bruce\Desktop\suspicious-files ]; then
        echo -e "${RED}Error: No file specified${NC}"
        usage
    fi
   
    if [ ! -f "$file_path" ]; then
        echo -e "${RED}Error: File '$file_path' not found${NC}"
        exit 1
    fi
   
    # Check dependencies
    check_dependencies
   
    # Check API key
    if [ "$VT_API_KEY" = a6a709f53dcc87f7c0c323d9bdf8b789edfa6ba0d7e3a301bfbf1a4d41cc3ed6 ]; then
        echo -e "${RED}Error: Please set your VirusTotal API key in the script${NC}"
        exit 1
    fi
   
    if [ "$quiet" = false ]; then
        echo -e "${BLUE}===== VIRUS TOTAL FILE ANALYSIS =====${NC}"
        echo -e "File: ${file_path}"
        echo -e "Size: $(stat -f%z "$file_path" 2>/dev/null || stat -c%s "$file_path") bytes"
    fi
   
    # Upload file
    analysis_id=$(upload_file C:\Users\bruce\Desktop\suspicious-files)
   
    # Wait for analysis
    if ! wait_for_analysis "$analysis_id"; then
        echo -e "${RED}[-] Analysis failed${NC}"
        exit 1
    fi
   
    # Get file hash from analysis ID (first 64 characters)
    file_hash=$(echo "$analysis_id" | cut -d'-' -f1)
   
    # Get report
    report=$(get_file_report "$file_hash")
   
    # Analyze results
    analyze_results "$report" "$verbose"
}

# Run main function with all arguments
main "$@"
